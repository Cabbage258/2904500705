Vue.js
    介绍
        Vue是一套用于构建用户界面的渐进式框架
    安装/引入
        ·开发环境版本
         <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        ·生产环境版本
         <script src="https://cdn.jsdelivr.net/npm/vue"></script>
    声明式渲染
        · Vue.js的核心是一个允许采用简洁的模版语法来声明式地将数据渲染进DOM的系统
        · 每个Vue应用都是通过Vue函数创建一个新的Vue实例开始的

        一个Vue应用由一个通过 new Vue 创建的根Vue实例,以及可选的嵌套的、可复用的组件树组成.
            所有的Vue组件都是Vue实例,并且接受相同的选项对象(一些根实例特有的选项除外)

        Tips:
            虽然没有完全遵守MVVM模型,但是Vue的设计也受到了它的启发.因此在文档中经常会使用vm(viewModel的缩写)
        这个变量名表示Vue实例

        <div id='app'>
            {{msg}}
        </div>

        let app = new Vue({
            el:'#app',
            data:{msg:'hello'},
            ..
        })
        注意
            我们不再和HTML直接交互.一个Vue应用会将其挂载到一个DOM元素上(上面例子为#app),然后
            对其进行完全控制.那个HTML是我们的入口,其余部分都会发生在新建的Vue实例内部.

    数据与方法
          当一个Vue实例被创建时,它将 data 对象中的所有属性(property)加入到Vue的响应式系统中.当这些属性的值发生改变时,
        视图将会产生"响应",即匹配更新为新的值.
            Tips:
                只有当实例被创建时就已经存在于 data 中的property才是响应式的.也就是说如果添加一个新的属性,对于该属性的改动不会触发任何视图的更新.
                如果要添加,需要一开始就设置初始值,比如[]
                唯一的例外是使用Object.freeze(),这会阻止修改现有的属性,也意味着响应系统无法再追踪变化.
        · 另外除了数据属性,Vue实例还暴露了一些有用的实例属性与方法.它们都有前缀 $ ,以便与用户定义的属性区分开.

    指令
        本质就是自定义属性
        指令带有前缀-v,以表示它们是Vue提供的特殊属性.它们会在渲染的DOM上应用特殊的响应式行为

    实例生命周期钩子
          每个Vue实例在被创建时都要经过一系列的初始化过程.在这个过程中也会运行一些叫做生命周期钩子的函数,这
        给了用户在不同阶段添加自己的代码的机会.(生命周期钩子的 this 上下文指向调用它的Vue实例)
    注意:
        不要在选项属性或回调上使用箭头函数.因为箭头函数并没有this,this会作为变量一直向上级词法作用域查找.
        但可以在function(){}内使用箭头函数.(尽量不要使用)

