钩子函数与回调函数
    钩子函数和回调函数一般都可用来处理事件回调
    回调函数是留下处理方法给事件,事件发生后会自动执行留下的处理方法.
    在某种意义上,回调函数做的处理过程跟钩子函数中要调用回调方法一样.
    但是
        钩子函数一般是由事件发生者提供的.直白的说,它留下了一个钩子,这个钩子的作用就是勾住你的回调方法

Vue的组件
    简述
          组件(Component)是vue.js中很强大的一个功能,可以将一些可重用的代码进行封装重用.所有的Vue组件
        同时也是Vue实例,可以接受使用相同的选项对象和提供相同的生命周期钩子.
            即 组件就是可以扩展HTML元素,封装可重用的HTML代码,可以将组件看作自定义的HTML元素.
    使用
        前提
              使用组件名的时候需要先实例化Vue,因为组件现在是扩展在Vue中,想使用Vue中的组件就需要
            先实例化获得这个组件才能够使用.
        1.创建组件
            创建组件即在Vue构造函数中通过extend()方法添加该组件.
        2.注册组件
            注册组件即在Vue构造函数中通过一个属性名与之关联在一起,
            注册的组件可分为全局注册与局部注册,区别:
                注册的地方不一致.全局注册就是只要是实例化Vue的范围都可以使用该组件;
                局部注册只能在某一个Vue实例的范围内使用该组件.
        · 全局注册(使用 Vue.component(tagName,options))
            例
            //使用组件
                  < div id="app">
                     < my-component>< /my-component>
                  < /div>
            //确保在初始化根实例之前注册组件
                Vue.component('my-component', {
                  template: '< div> component test! < /div>'
                })
            // 创建根实例
                new Vue({
                  el: '#app',
                  components: { App },
                  template: ''
                })
            //最终渲染为
                <div id="app"><div>component test!</div></div>
        · 局部注册
            每个组件都注册到全局的方式显然很不合理,更多的时候采用的往往是局部注册的方式,
            可以通过某个Vue实例/组件的实力选项components 注册仅在其作用域中可用的组件
            例
                var Child = {
                  template: '< div>一个局部注册的组件!< /div>'
                }
                new Vue({
                  components: {
                  // < localRegistration>  只在父组件模板中才可用
                    'localRegistration': Child
                  }
                })
        3.使用组件
            可以在DOM中添加所创建的组件名
