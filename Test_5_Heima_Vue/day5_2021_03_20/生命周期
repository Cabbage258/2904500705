new Vue()
        new了一个Vue实例对象,此时,进入组件的创建过程.
    初始化(事件&生命周期)
        初始化组件的事件和生命周期.
        当执行完这一步后,组件的生命周期函数就已经全部初始化完毕,等待调用
--------beforeCreate
        第一个生命周期函数,此时,组件的data和methods以及页面DOM结构,都还没有
        初始化,所以这里什么都做不了.
    初始化(注入&校验)
        这个阶段中,正在初始化data和methods中的函数和方法
--------created
        第二个生命周期函数,,此时组件中的data和methods可用.
        但页面还没被渲染出来,在该函数中,经常会发起ajax请求.

<------------------这里开始编译模版结构---------------------->
        把data上的数据拿到,并且解析执行模版中的指令.
        当所有制令被解析完毕,那么模版页面就被渲染到内存中了.
    判断是否指定'el'选项. 否--→调用vm.$mount(el)函数
             是↓
    是否指定'template'选项?
               否--→将el外部的HTML作为template编译
               是--→将template编译到render函数中.
        当模版编译完成,我们的模版页面还没有挂载到页面上,只是存在于
        内存中,用户看不到页面.
<----------------------模版编译完成------------------------->

--------beforeMount
        当模版在内存中编译完成,会立即执行该函数.
        此时内存中的模版结构还没真正渲染到页面上,页面上看不到真实的数据,
        此时用户看到的只是一个模版而已
    创建vm.$el并用其替换'el' (这一步正在把内存中渲染好的模版结构,替换到页面上)

<------------------运行中的生命周期函数------------------------->
--------mounted
        组件创建阶段最后一个生命周期函数;此时页面已经真正渲染好了,用户已经可以看到
        真实的页面数据了.
        该生命周期函数执行完,组件就离开了创建阶段,进入运行阶段.
--------beforeUpdate
        此时页面数据是最新的,但页面上呈现出来的数据还是旧的
    虚拟DOM重新渲染并应用更新
        正在根据最新的data数据,重新渲染内存中的模版结构,并把渲染好的替换到页面上
--------updated
        页面已经完成了更新,此时data数据与页面呈现的数据都是最新的
<----------------------------------------------------------->

<------------------------调用vm.$destroy()函数时--------------------->
--------beforeDestroy
        执行该函数的时候,组件即将被销毁,但还没有真正开始销毁,此时组件还是正常可用的.
        data、methods等数据或方法依然可以被正常访问
    解除绑定;销毁子组件以及事件监听器
--------destroyed
<----------------------------组件完成销毁----------------------------->
