1.JS是运行在客户端的一种解释型编程语言.它是一种弱类型的语言.
2.JS的作用:
    用来完成前后端交互,增加用户体验的一些逻辑实现.
3.一个网页室友三部分组成的:结构(HTML)、表现(CSS)、行为(JavaScript)
4.前端开发核心是JavaScript
5.JavaScript的组成:
    · ECMAScript(标准:ECMA-262):基础语言部分(基础、面向对象等)
    · DOM(标准:W3C):节点操作
    · BOM(无标准):浏览器操作
6.JS的特点
    1)松散性
        JS中的变量没有一个明确的类型,也叫弱类型的语言(允许将一块内存看作多种类型)
    2)对象属性
        对象的属性也可以映射为任意类型的数值
    3)继承机制
        JS是基于原型继承的
7.使用JavaSCript
    1)使用script标签
    2)在a标签的href中写js代码
    3)用script标签引入外部js文件
8.标识符
    所谓的标识符,就是指变量、函数、属性的名字、或者函数的参数
        标识符定义规则:
            1)第一个字符必须是一个字母、下划线(_)或一个美元符号($)
            2)其他字符可以使字母、下划线、美元符号或数字
            3)不能把关键字、保留字,true,false和null作为标识符
            注意:
                关键字及保留字在打出时会有语法提示
                JS中任何地方都是严格区别字母大小写的
9.注释
10.常量
    常量也叫直接量或字面量,在程序中直接给出具体的数值
    常量是不可以改变的,如:100,true,'abc',null,undefined等
11.变量
    变量就是在内存中开辟一段空间用于存放某个数据
    变量必须要有变量名,变量名必须遵守标识符的命名规范
    定义:
        1)只定义变量
            var x;var a,b,c
        2)定义变量且赋值
            var x = true;var y =100
        说明
            · 定义变量时不需要给出数据的类型(松散式语言不用给出显示类型)
            · 变量可以重复定义,后面的会覆盖前面的变量
            · 不用var定义变量也可以,默认是为window对象添加了属性
            · 定义的彼岸来那个如果没有赋值,系统将自动赋默认值为undefined
            · 一条语句可以以分号结束,也可以不加分号;如果多条语句写在同一行上,必须用分号隔开.
            · 在书写代码时,除了字符串可以使用中文标点外,其他任何地方只能使用英文标点.
12.数据类型
    数据类型指的是在内存存储的方式
    分为:
        1)基本数据类型
            Number:数值型
                用来表示一个数字,通常可用作进行加减乘除等运算
                分为整型和浮点型(小数)
                isNaN():用来判断是不是不是一个数(NaN是数值类型)
            String:字符型
                用引号(单双引号都可以,它们没区别)引起来的一串字符(可以是数字、字母、标点符号、汉字等),通常用作描述用

            boolean:布尔(逻辑)型
                表示真(true)或假(false)
            null:空
                表示一个空对象的地址指定指向的为空
            undeined:未定义
                表示声明了一个变量,但没有给这个变量赋值,系统将自动赋值为undefined
        2)引用数据类型
            object:对象型
                用来申明或存储一个对象(对象、函数、正则、字符、数值等)
                var a = new Number(10)
                var obj = {name:'张三'}
13.运算符
    1)算术运算符
        + - * / %(求余/模) ++(自增) --(自减)
                          ++a:前自增,先+a再运算
                          a++:后自增,先运算再+a
    2)字符串运算符
        +:用于拼接字符串
    3)关系运算符
        > < >= ......
        返回的结果只能是true或false
        比较方法
            · 数值比较,比较大小
            · 字符比较,比较ASCII码值的大小
            · 汉字比较,比较其Unicode编码值的大小(可以通过charCodeAt()方法来获取编码值)
            · ==和!=只比较值,不比较类型;!==和===既比较值又比较类型
        比较:部分符号<数字<大写字母<小写字母<汉字
    4)逻辑运算符
        逻辑运算符有:!、&&和||三种,返回的值一般是逻辑值true或false,也可能返回其他值
        !:逻辑非(取反)(单目/一元运算)
            !ture-->false
        &&:逻辑与(双目/二元运算)
            只要有一个操作数为false,结果就位false
        ||:逻辑或(双目/二元运算)
            只要有一个操作数为true,结果为true
        短路运算:
            &&运算时,如果第一个操作数为false,不需要计算第二个操作数,结果直接返回false
            ||运算时,如果第一个操作数为true,不需要计算第二个操作数,结果直接返回true
    5)位运算符
    6)三目运算符(条件运算符)
        语法:
            表达式1 ? 表达式2 : 表达式3
            如果表达式1成立,返回表达式2的结果,如果表达式1不成立,返回表达式3的结果
        tipe:
            三目运算相当于if语句中的双分支结构
            如果表达式2或表达式3较为复杂,建议使用if语句或switch语句实现
14.流程控制
    JS是一门既面向过程也是面向对象的解释语言
    代码的执行顺序由上到下
    流程控制就是指可以通过规定的语句让代码有条件的执行,改变程序的运行顺序.

    1)条件结构
        a.单分支
            if(条件)语句
                条件成立,执行语句或语句组;不成立,执行if的下一条语句
        b.双分支
            if(条件){语句组1}else{语句组2}
                条件成立,执行语句组1;条件不成立,执行语句组2
        c.多分支
            实际上就是单分支和双分支的嵌套
    2)循环结构
        I)循环
            a.计数循环(for)
                语法:
                    for([变量初始值];[条件];[步长]){
                        [循环体;]
                        [continue;]
                        [break']
                    }
                说明:
                    先执行变    量初始值,再判断条件,如果条件成立,再执行循环体,再计算步长
                    最后再判断条件,条件成立,继续执行循环体...直到条件不成立,跳出循环体为止
            b.当型循环(while)
                语法:
                    while(条件){
                        [循环体;]
                        [continue;]
                        [break;]
                    }
                说明:
                    当条件成立时,执行循环体,反之则跳出循环体
            c.直到型循环(do...while)
                语法:
                    do[
                        [循环体;]
                        [continue;]
                        [break;]
                        ]
                说明:
                    先执行循环体,再判断条件,如果条件成立,继续循环,反之则跳出循环.
                    直到型循环与当型循环的区别
                        当条件一次都不成立时,直到型循环至少会执行一次循环,而当型循环一次也不执行.
            d.数组和对象遍历
        II)break和continue语句
            break语句可以用在switch语句和循环语句中(forEach循环除外),表示跳出(结束)情况语句或循环
            continue语句只能用在循环语句中(forEach循环除外),表示结束本次循环,继续下一次循环
            break和continue语句必须单独存在,后面不能添加其他代码
            break和continue语句一般放在if语句中
15.函数
    函数就是将具有一定功能的一段JS代码的封装,可以在程序的多个地方被反复调用
    i)定义函数
        格式一:
            function 函数名 ([形参列表]){
                函数体;
                [return [<表达式>]]
            }
        格式二:
            var 变量名 = function([形参]){
                函数体
                [return [<表达式>]
            }
        格式三:
            (function([形参])){
                函数体
                [return [<表达式>]
            }([实参列表])
                上面的函数叫立即执行函数(IIFE),它自动调用自身,不能在其他地方被调用,一般用于js库或js插件的封装或闭包处理.
    2)函数调用
        函数名([实参])
    3)return
        函数可以通过return返回结果,如果return没有返回结果,表示结束函数的调用,且返回调用处
    3)arguments对象
        返回实参列表的一个伪数组
            · 具有数组的length属性
            · 按索引方式存储数据
            · 不具有数组的push等方法
        一般用在不确定传过来的实参的个数的情况下
16.对象(Object)
    对象,其实就是一种类型,即引用类型,用于将数据和功能组织在一起
    对象由属性和方法组成,通常用键值对定义
    i)对象定义
        a)new构建
            new Object([参数])
        b)字面量定义
            var obj = {
                key:value,
                fn:function(){}
                }
    2)对象引用
        a)对象名.属性名
          对象名.方法名([实参列表])
        b)对象名[属性名]
17.数组Array
    数组将一组数据组合到一起,并存入到一个变量中
    数组是有序排列的,占用一段连续的内存空间
    一个数组可以存储不同类型的数据
    1)定义数组
        a.new
            new Array([])
        b.字面量创建
            var arr = [值列表]
    2)获取数组元素值
        数组名[索引]     //索引可以使一个数值型常量,也可以使一个表达式或函数或变量
    3)遍历数组
        一维数组用一个循环实现,二维数组必须用双唇循环实现(先行后列)
            a.for
            b.for...in
            c.forEach()
    4)数组的属性和方法
        a.length属性
            获取数组的长度
        b.方法
            push()
                想数组中添加数据到数组最后
            pop()
                删除数组最后一个元素
            unshift()
                向数组头部添加数据
            shift()
                删除数组第一个元素
            concat()
                将两个或多个数组组合成一个数组
            reverse()
                对数组进行倒序处理
            join()
                将数组转换为字符串,参数为分隔符,默认为 ,
            splice()
                删除、修改或向数组中添加数据
18.Function类型
    Function是一个用来构建函数的类(构造函数)
    函数内部属性
        在函数内部,有两个特殊的类:arguments和this
            callee
                arguments是一个类数组对象,包含着传入函数中的所有参数,主要用来保存函数参数
                但这个对象还有一个明教callee的属性,该属性是一个指针,指向拥有这个arguments对象的函数
                也即是说可以通过arguments.callee调用函数自身,一般用于函数的递归调用(函数自己调用自己叫函数的递归调用)
            this指针对象
                在全局中this指向的是window(在JS中没有global这个全局对象,而JS的全局对象是window)
                在函数中this指向的是这个函数执行所操作的当前对象
19.内置对象
    1)global对象
        在JS中没有global对象,web浏览器将global对象视为window对象的一部分加以实现
        方法:
            encodeURIComponent():对unicode进行编码处理
            decodeURIComponent():对unicode编码进行解码处理
            eval():具有字符串解析器的作用(慎用!因为他的性能较差且比较危险)
        2)Math对象
            Math数学对象不是一个构造函数,所以不需要new调用,直接拿来用里面的属性和方法接口
            该对象主要提供了大量的数学运算的属性和方法
            属性:
                Math.E      表示自然对数的底数
                Math.PI     表示一个圆的周长与直径的比例 π
            方法:
                min()                   取最小值函数
                max()                   取最大值函数
                round()                 四舍五入函数
                ceil()                  向上取整(取大于或等于操作数的最小整数)
                floor()                 向下取整(取小于或等于操作数的最大整数)
                random()                产生[0,1)之间的一个小数
                abs(num)                返回num的绝对值
                exp(num)                返回Math.E的power次数
                log(num)                返回num的自然对数
                pow(num,power)          返回num的power次幂
                sqrt(num)               返回num的平方根
                acos(x)                 返回x的反余弦值
                asin(x)                 返回x的反正弦值
                atan(x)                 返回x的反正切值
                atan2(y,x)              返回y/x的反正切值
                cons(x)                 返回x的余弦值
                sin(x)                  返回x的正弦值
                tan(x)                  返回x的正切值
20.面向对象
    创建对象:
        1)常规创建
            a.new
            b.字面量创建
        2)工厂模式
            通过封装函数实现创建一批相似的对象
            缺陷:无法知道创建的对象是哪一个对象的实例
        3)构造函数
            构造函数是用来构建一个类(ES5中没有类的概念,实际上这里的个欧早函数就是类)
            类是对象的一个抽象符号化表示(把相同或相似的一部分对象抽离出来就形成了一个类)
            对象是类的实例化(具体化)(赋予一定的属性和功能)
            a.创建构造函数(类)
                语法:
                    function 类名 ([形参列表]){
                        this.属性名 = 参数
                        this.方法名= function(){}
                    }
                b.通过构造函数实例化对象
                    new 类名([实参列表])

                使用了构造函数的方法,和使用工厂模式的方法不同之处:
                    · 构造函数方法没有显式的创建对象(new Object())
                    · 直接将属性和方法赋值给this对象
                    · 没有return语句
                构造函数的方法有一些规范
                    · 函数名或饿实例化构造名相同且大写(非强制,但这么写有助于区分构造函数和普通函数)
                    · 通过构造函数创建对象,必须要使用new运算符
                构造函数执行的过程:
                    · 当使用了构造函数,并且new构造函数(),那么就从后台执行了new.Object()
                    · 将构造函数的作用域给新对象(即new Object()创建出来的对象),而函数体内的this就代表了new Object()出来的对象
                    · 执行构造函数内的代码
                    · 返回新对象(后台直接返回)
21.基本包装类型(字符串对象)
    字啊基本数据类型中有3个特殊的类的存在:String、Number和Boolean
    上面3个基本类型都有自己的包装对象,有相应的属性和方法
    调用方法的过程是在后台发生的,所以我们称之为基本包装类型
    1)Boolean类型
        没有自己的属性和方法
    2)Number类型
        a.属性:
            MAX_VALUE               表示最大值
            MIN_VALUE               表示最小值
            NaN                     非数值
            NEGATIVE_INFINITY       负无穷大,溢出返回该值
            POSITIVE_INFINITY       无穷大,溢出返回该值
            prototype               原型,用于增加新属性和方法
        b.方法:
            toString()              将数值转化为字符串,并且可以转换进制
            toLocaleString()        根据本地时间把Date对象转换为字符串
            toExponential()         将数字以指数形式表示,保留小数点后指定位数并转化为字符串
            toPrecision()           指数形式或点形式表示数,保留小数点后指定位数并转化为字符串
            value()                 显示原始值
    3)String
        a.属性
            length
        b.方法
            charAt(n)                           返回指定索引位置的字符
            str[n]                              获取指定位置处的字符(兼容性问题)
            charCodeAt(n)                       以Unicode编码的形式返回指定索引位置的字符
            concat(str1...str2)                 将字符串参数串联到调用该方法的字符串
            slice(n,m)                          返回字符串n到m之间位置的字符串
            substring(n,m)                      返回字符串n到m之间位置的字符串
            substr(n,m)                         返回字符串从n开始的m个字符串
            indexOf(str,n)                      从n开始搜索的第一个str,并将搜索的索引值返回
            lastIndexOf(str,n)                  从n开始搜索的最后一个str,并将搜索的索引值返回
            str.toLowerCase()                   将字符串全部转换为小写
            str.toUpperCase()                   将字符串全部转换为大写
            (了解)str.toLocaleLowerCase()        将字符串全部转换为小写,并本地化
            (了解)str.toLocaleUpperCase()        将字符串全部转换为大写,并本地化
                注意:只有几种语言(如土耳其语)具有地方特色的大小写本地性,一般来说,是否本地化效果都是一致的
            match(pattern)                      返回pattern中的子串或null
            replace(pattern,replacement)        用replacement替换pattern
            search(pattern)                     返回字符串中pattern开始位置
            split(pattern)                      返回字符串按指定pattern拆分的数组
            String.formCharCode(ascii)          输出ASCII码对应值
            localCompare(str1,str2)             比较两个字符串,并返回相应的值
22.变量、作用域及内存
    1)变量
        a.基本类型的变量
            基本类型的变量的存储在栈中
        b.引用类型的变量
            引用类型的变量的值存储在堆中,在栈中存储的是引用类型的变量的地址(指针)
            如果想要获取引用类型变量的值,需要从栈中获取地址,再按址查找,从而获取到值
    2)作用域
        在ES5作用域分为全局作用域和局部作用域两种
        在ES6作用域分为全局作用域、局部作用域和块级作用域三种
            全局作用域:
                定义在函数外部的变量拥有全局作用域
            局部作用域:
                定义在函数内部的变量拥有局部作用域
    3)垃圾回收机制
        js有自动回收垃圾的功能
        在项目开发过程中,初始化对象时,最好赋初值为null