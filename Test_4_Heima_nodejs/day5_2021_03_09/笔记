express基本使用
    express是对原生node的再次封装,相当于jquery与js的关系
    安装
        npm i express
    导入
        const express = require('express')
    实例化一个web服务器对象
        const app = express()
    调用listen(端口号,启动成功后的回调函数)
        app.listen(80,() => {
            console.log('express server running at http://127.0.0.1:80')
        })
    监听请求,响应
        监听get请求
            app.get('请求url',(req,res) => {
                //响应
                    res.send({键:值})
            }
        监听post请求
            app.post('请求url',(req,res) => {
                //响应
                    res.send('请求成功!')
            })
    通过req.query对象,可以访问到客户端通过查询字符串的形式发送到服务器的参数
        例
            客户端使用?name=zhangsan&age=20这种查询字符串的形式
            使用req.query对象可以访问到
                req.query.name //zhangsan
                req.query.age  //20
    通过req.params对象,可以访问到url中通过 : 匹配到的动态参数
        req.params默认为一个空对象,里面存放通过 : 动态匹配到的参数值
        例
            app.get('/user/:id',(req,res) => {
                console.log(req.params)
            }
    app.use()
        注册全局中间件
        可以连续注册多个全局中间件.客户端请求到达服务器后,会按照注册的先后顺序依次进行调用
    模块化路由
        · 创建路由模块对应的.js文件
        · 调用express.Router()函数创建路由对象
        · 向路由对象上挂载具体的路由
        · 使用module.exports向外共享路由对象
        · 使用app.use()函数注册路由模块

    中间件
        特指业务流程的中间处理环节.
        express中间件,本质上是一个function处理函数
        中间函数的形参列表中必须包含next参数.表示把流转关系转交给下一个中间件或路由
        特性
            多个中间件之间,共享同一份req和res.可以在上游的中间件中统一为req或res添加属性或方法,
            供下游的中间件或路由进行使用

    中间件分类
        应用级别的中间件
            绑定到app实例上的中间件
        路由级别的中间件
            绑定到express.Router()实例上的中间件
        错误级别的中间件
            专门用来捕获整个项目中发生的异常错误,从而防止项目异常崩溃的问题
            要写在所有路由挂载的后面
            格式
                app.use((err,req,res,next) => {
                    console.log('发生了错误: ' + err.message)    //在服务器打印错误信息
                    res.send('发生错误:' + err.message)         //响应错误信息
                })
        Express内置的中间件
            · express.static
                快速托管静态资源的内置中间件(无兼容性问题)
            · express.json
                解析JSON格式的请求体数据(v4.16.0+)
            · express.urlencoded
                解析URL-encoded格式的请求体数据(v4.16.0+)
        第三方的中间件
            非Express官方内置的,而是由第三方开发出来的中间件.
