...
    内置中间件
        在服务器端可以使用req.body获取客户端请求数据
        必须设置解析器才能拿到数据(解析器放在路由之前)
            注册json格式解析器
                app.use(express.json())
            注册x-www-form-urlencoded解析器
                app.use(express.urlencoded({extended:false{))
    第三方中间件
    · npm i 包名
    · require导入
    · app.use()

使用express写接口
    接口跨域问题
        · npm i cors
        · 导入cors
            const cors = require('cors')
        · 注册cor(后续的所有接口都会被处理成cors接口)
            app.use(cors())
    cors响应头部
        Access-Control-Allow-Origin: <origin> | *
            origin参数为允许访问该资源的外域url;*为允许来自任何域的请求
        Access-Control-Allow-Headers:

        Access-Control-Allow-Headers:
            设置请求方式

    简单请求
        客户端与服务器之间只会发生一次请求
    预检请求
        客户端与服务器之间会发生两次请求:先发送OPTION请求,成功后发送真正的请求
        符合任一条件都为预检请求
        · 请求方式为GET,POST,HEAD之外的请求
        · 请求头包含自定义头部字段
        · 向服务器发送了application/json格式的数据
    JSONP接口
        · 必须在注册cors中间件之前声明JSONP的接口.


数据库
    数据库是用来组织、存储和管理数据的仓库.
    传统型数据库的组织结构:数据库、数据表、数据行、字段(列)(每个字段都有对应的数据类型)
    数据库的注释
        单行注释: -- 注释内容    #注释内容(mysql特有)
        多行注释: /* 注释内容 */
    简单使用SQL语言
        SELECT  语句
            select * from 表名称
            select 列名称 from 表名称
        INSERT INTO 语句
            INSERT INTO 表名称 (列1,列2,...) values (值1,值2,...)
        UPDATE 语句
            UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称=某值
        DELETE 语句
            DELETE FROM 表名称 WHERE 列名称=值
        WHERE 子句
            用于限定选择的标准
            可在WHERE子句中使用的运算符
            操作符                       描述
            =                           等于
            <>或!=                      不等于
            >                           大于
            <                           小于
            >=                          大于等于
            <=                          小于等于
            BETWEEN                     在某个范围内
            LIKE                        搜索某种模式
        AND 和 OR 运算符
            可以在WHERE子句中把两个或多个条件结合起来.
                AND表示同时满足,相当于&&
                OR表示任一满足,相当于||
        ORDER BY 子句
            升序排序
                SELECT * FROM 表名称 ORDER BY 列名称 [ASC]
            降序排序
                SELECT * FROM 表名称 ORDER BY 列名称 DESC
            多重排序(先按照列名称1进行排序,在此基础上再对列名称2进行排序)
                SELECT * FROM 表名称 ORDER BY 列名称1 DESC, 列名称2 [ASC]
        COUNT(*) 函数
        用于返回查询结果的总数据条数
            SELECT COUNT(*) [返回结果中显示的列名称] FROM 表名称 [WHERE 条件]
