...
    内置中间件
        在服务器端可以使用req.body获取客户端请求数据
        必须设置解析器才能拿到数据(解析器放在路由之前)
            注册json格式解析器
                app.use(express.json())
            注册x-www-form-urlencoded解析器
                app.use(express.urlencoded({extended:false{))
    第三方中间件
    · npm i 包名
    · require导入
    · app.use()

使用express写接口
    接口跨域问题
        · npm i cors
        · 导入cors
            const cors = require('cors')
        · 注册cor(后续的所有接口都会被处理成cors接口)
            app.use(cors())
    cors响应头部
        Access-Control-Allow-Origin: <origin> | *
            origin参数为允许访问该资源的外域url;*为允许来自任何域的请求
        Access-Control-Allow-Headers:

        Access-Control-Allow-Headers:
            设置请求方式

    简单请求
        客户端与服务器之间只会发生一次请求
    预检请求
        客户端与服务器之间会发生两次请求:先发送OPTION请求,成功后发送真正的请求
        符合任一条件都为预检请求
        · 请求方式为GET,POST,HEAD之外的请求
        · 请求头包含自定义头部字段
        · 向服务器发送了application/json格式的数据
    JSONP接口
        · 必须在注册cors中间件之前声明JSONP的接口.


数据库
    数据库是用来组织、存储和管理数据的仓库.
    传统型数据库的组织结构:数据库、数据表、数据行、字段(列)(每个字段都有对应的数据类型)
    数据库的注释
        单行注释: -- 注释内容    #注释内容(mysql特有)
        多行注释: /* 注释内容 */
    SQL分类
        DDL数据定义语言
            用来定义数据库对象:数据库、表、列等
            关键字 create drop alter
        DML数据操作语言
            用来对数据库中表的数据进行增删改
            关键字 insert delete update
        DQL数据查询语言
            用来查询数据库中表的记录(数据)
            关键字 select where
        DCL数据控制语言
            用来定义数据库的访问权限和安全级别,及创建用户.
            关键字 grant revoke
    DDL操作数据库
