ES6新增语法
    1.声明变量
        i)let命令
            基本用法:
                ES6新增了let命令,用来声明变量.它的用法类似于var,但是所声明的变量,只在let命令所在的代码块内有效.
                for循环中,如果用let声明变量,每一次循环的都是一个新的变量.
                但是JavaScript引擎内部会记住上一轮循环的值,所以初始化本轮的变量时,就在上一轮循环的基础上进行计算.
                for循环还有一个特别指出,就是设置循环变量的那部分是一个父作用域,而循环体内部是一个单独的子作用域.
                即是说用let声明的循环变量与同名的函数内部变量不在同一个作用域,有着各自单独的作用域.
            不存在变量提升:
                var命令有变量提升现象(即变量可以在声明之前使用,值为undefined).
                而let声明的变量不存在这种现象.在脚本运行到let声明变量这行代码之前,let声明的变量是不存在的.
            暂时性死区:
                只要块级作用域内存在let命令,它所声明的变量就"绑定"(binding)这个区域,不再受外部的影响.
                ES6明确规定,如果区块中存在 let 和 const 命令,这个区块对这些命令声明的变量,从一开始就形成了封闭
                作用域.凡是在声明之前就使用这些变量,就会报错.(包括在函数外已经var全局声明过的同名变量.)
                在语法上,称为"暂时性死区"
                这也使得typeof不再是一个百分百安全的操作:
                    如果变量用let命令声明,所以在声明之前,都属于该变量的死区,在该变量的死区内用typeof运行就会返回  ReferenceError
                    作为比较,如果一个变量根本没有被声明,使用typeof反而不会报错.在没有let之前,typeof永远不会报错.
                    有些死区比较隐蔽,例如:
                        function bar( x = y ,y = 2){
                            return [x,y]
                        }
                        bar()   //报错
                    因为参数x默认值等于零一个参数y,但此时y还没有声明,属于"死区".如果y的默认值是x,就不会报错,因为此时x已经声明了.
                其本质就是,只要一进入当前作用于,所要使用的变量就已经存在了,但是不可获取,只有等到变量声明的哪一行代码出现,才可以获取和使用该变量.
            不允许重复声明:
                let不允许在相同作用域内,重复声明同一个变量.

        ii)块级作用域
            ES5没有块级作用域,者带来很多不合理的场景:
                内层变量可能会覆盖外层变量;
                用来计数的循环变量泄露为全局变量.

            let实际上为JavaScript新增了块级作用域.(ES6允许块级作用域的任意嵌套)(内层作用域可以定义外层作用域的同名变量)
            块级作用域的出现,实际上使得广泛应用的匿名立即执行函数表达式不再必要了:
                IIFE写法:
                    (function(){
                        var tmp = ...;
                        ...
                    }())
                块级作用域写法:
                    {
                        let tmp = ...;
                        ...
                    }

            ES6规定,块级作用域之中,函数声明语句的行为类似于let,在块级作用域之外不可引用.
            但,如果改变了块级作用域内声明的函数的处理规则 显然会对老代码产生很大影响.ES6在附录B规定,浏览器的实现可以不遵守上面规定,有自己的行为方式
                · 允许在块级作用域内声明函数
                · 函数声明类似于var,即会提升到全局作用域或函数作用域头部
                · 同时,函数声明还会提升到所在的块级作用域的头部
            所以考虑到环境导致的行为差异太大,应该避免在块级作用域内声明函数,如果确实需要,也应该写成函数表达式,而不是函数声明语句.
        iii)const命令
            const声明一个只读的常量,一旦声明,常量的值酒不能改变.这也意味着const一旦声明变量,就必须立即初始化,不能留到以后赋值.
            const的作用域与let命令相同,只在声明所在的块级作用域内有效.
            const同样存在暂时性死区,只能在声明的位置后面使用.
            const不允许在相同作用域内,重复声明同一个变量.

            本质
                const实际上保证的,并不是变量的值不得改动,而是变量指向的那个内存地址锁保存的数据不得改动.
                对于简单类型的数据(数值、字符串、布尔值),值就保存在变量指向的那个内存地址,因此等同于常量.
                但对于复合类型的数据(主要是对象和数组),变量指向的内存地址,保存的只是一个指向实际数据的指针,
                const只能保证这个指向指针是固定的(即总是指向另一个固定的地址),至于它指向的数据结构是不是可变的,
                就完全不能控制了.
                    例如
                        const声明的一个常量a存储的是一个地址,这个地址指向一个对象.
                        不可变的只是这个地址,即不能把a指向另一个地址,但对象本身是可变的,依然可以为其添加新属性.

            Tips:
                ES5两种声明变量的方法:var命令和function命令
                ES6四种声明变量的方法:let命令、const命令、import命令、class命令.

    2.解构赋值
        ES6允许按照一定模式,从数组和对象中提取值,对变量进行赋值,这被称为解构.(如果解构不成功,变量值为undefined)
        本质上,这种写法属于'模式匹配',只要等号两边的模式相同,左边的变量就会被赋予对应的值.
        不完全解构:
            如果等号左边的模式,只匹配一部分等号右边的数组,这种情况下解构依然可以成功.
        如果等号右边不是可遍历的结构,那么将会报错.

    3.箭头函数
        ES6允许使用"箭头"(=>)定义函数.
        如果箭头函数不需要参数或需要多个参数,就使用一个圆括号代表参数部分.
        如果箭头函数的代码块部分多于一条一局,就要使用大括号将它们括起来,并且使用return语句返回.
        由于大括号被解释为代码块,所以如果箭头函数直接返回一个对象,必须在对象外面加上括号.
        注意点:
            · 函数体内的this对象,就是定义时所在的对象,而不是使用时所在的对象.
            · 不可以当作构造函数,也就是说,不可以使用new命令,否则会抛出一个错误.
            · 不可以使用arguments对象,该对象在函数体内不存在.如果要用,可以用rest参数替代.
            · 不可以使用yield命令,因此箭头函数不能用作Generator函数.
        this对象的指向是可变的,但是在箭头函数中,它是固定的.
        函数剩余参数(rest参数)
            形式:
                ...变量名
            用于获取函数的多余参数.rest参数搭配的变量是一个数组,该变量将多余的参数放入数组中.
            · rest参数之后不能再有其他参数
            · 函数的length属性,不包括rest函数

    4.扩展运算符
        扩展运算符是三个点 ...   .它好比rest参数的逆运算,将一个数组转为用都好分隔的参数序列.

    5.数组扩展方法
        i)Array.from()
            用于将两类对象转为真正的数组:
                ·类似数组的对象(array-like object)
                    本质特征只有一点,即必须拥有length属性.
                ·可遍历(iterable)对象
              Tips:
                  扩展运算符背后调用的是遍历器接口(Symbol.iterator),如果一个对象没有这个接口,就
                无法转换.Array.from方法还支持累死数组的对象.所谓类似数组的对象,本质特征就是必须
                有length属性.
                  因此,任何有length属性的对象,都可以通过Array.from()方法转为数组,而此时扩展运算符酒无法转换.
            Array.from()可以接受第二个参数,作用类似于数组的map方法,用来对每个元素进行处理,将处理后的值放入返回的数组.

        ii)数组实例的find()和findIndex()
              Array.find(function(当前的值,当前的位置,原数组){回调函数})
              find()方法用于找出第一个符合条件的数组成员.
              参数为一个回调函数,所有数组成员依次执行该回调函数,直到找出第一个返回值为true的成员,然后返回该成员.
            如果没有任何符合条件的成员,则返回undefined.
              数组实例的findIndex方法的用法与fin方法非常类似,返回第一个符合条件的数组成员的索引号,如果所有成员
            都不符合条件,则返回-1.
              这两个方法都可以接受第二个参数,用来绑定回调函数的this对象.

        iii)数组实例的includes()
            Array.prototype.includes()方法返回一个布尔值,表示某个数组是否包含给定的值,与字符串的includes方法类似.
                该方法的第二个参数表示搜索的起始位置,默认为0.如果第二个参数为赋值,则表示倒数的位置,如果这时它大于数组长
                度,则会重置为从0开始.

    6.模版字符串

    7.String扩展方法
        i)includes()、startsWith()、endsWith()
            ES6提供了三种新方法用来确定一个字符串是否包含在另一个字符串中:
                · includes():   返回布尔值,表示是否找到了参数字符串.
                · startsWith(): 返回布尔值,表示参数字符串是否在原字符串的头部.
                · endsWith():   返回布尔值,表示参数字符串是否在原字符串的尾部.
                Tips:
                    endsWith()使用第二个参数n时,行为与其他两个方法有所不同.它针对前n个字符,
                    而其他两个方法针对从第n个位置直到字符串结束.

        ii)repeat()
            repeat方法返回一个新字符串,表示将源字符串重复n次.
            参数如果是小数,会被取整.如果是负数或infinity,会报错.
            如果是0到-1的小数,会先进行取整,取整后为-0,repeat视为0返回.(参数NaN等同于0)
            如果参数是字符串,则会先转换成数字.
            如果参数为空,会把字符串清空,length变为0.
    8.set数据结构
        基本用法:
            ES6提供了新的数据结构Set.它类似于数组,但是成员的值都是唯一的,没有重复的值.
            Set本身是一个构造函数,用来生成Set数据结构.
        属性和方法:
          Set结构的实例有以下属性:
            Set.prototype.constructor
                构造函数,默认就是Set函数.
            Set.prototype,size
                返回Set实例的成员总数.
          Set实例的方法(操作方法和遍历方法)
            Set.prototype.add(value)
                添加某个值,返回Set结构本身
            Set.prototype.delete(value)
                删除某个值,返回一个布尔值,表示删除是否成功.
            Set.prototype.has(value)
                返回一个布尔值,表示该值是否为Set的成员.
            Set.prototype.clear()
                清除所有成员,没有返回值.
