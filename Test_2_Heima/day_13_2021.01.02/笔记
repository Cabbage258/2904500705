1.运算符
    1)算术运算符
           + - * / %(求余/模) ++(自增) --(自减)
            ++a:先自增再运算
            a++:先运算再自增
    2)字符串运算
        +:用于实现字符串连接
    3)关系运算符
        > < >= <= == === != !==
        范湖UI的结果只能是true或false
        比较方法
            a.数值比较,是比较其大小
            b.字符比较,是比较ASCII码值大小
            c.汉字比较,是比较其Unicode编码值的大小
                可以通过charCodeAt()获取编码值.
            d.==和!=只比较值,不比较类型;===和!==既比较值又比较类型
        比较:部分符号<数字<大写字母<小写字母<汉字
    4)逻辑运算符
        逻辑运算符有:!、&&和||三种,返回的值一般是逻辑值true或false,也可能返回其他值
        !:逻辑非(取反)(单目/一元运算)
            !true//false   !false//true
        &&:逻辑与(双目/二元运算)
            只要有一个操作数为false,结果为false
            注意:
                如果两个中任意一个操作数非逻辑值,第一个操作数的结果为true时,返回第二个操作数的值;
                                           第一个操作数为false是,返回第一个操作数的值.
        ||:逻辑或(双目/二元运算)
            只要有一个操作数为true,结果为true
            注意:
                如果两个中任意一个操作数非逻辑值,第一个操作数的结果为true时,返回第一个操作数的值;
                                          第一个操作数为false时,返回第二个操作数的值.
        短路运算:
            a.&&运算时,如果第一个操作数为false,不需要计算第二个操作数,结果返回false.
            b.||运算时,如果第一个操作数为false,不需要计算第二个操作数,结果返回true.

    5)位运算符

    6)三目运算符(条件运算符)
        语法:
            表达式1 ? 表达式2 : 表达式3
            如果表达式1成立,返回表达式2的结果;
            如果不成立,返回表达式3

        Tips:
            三目运算相当于if语句中的双分支结构
            如果表达式2或表达式3较为复杂,建议使用if语句或switch语句实现

        运算符优先级:
            运算符                                描述
              .  [] ()                           字段访问、数组下标、函数调用以及表达式分组
              ++ -- - ~ ! delete new typeof void 一元运算符、返回数据类型、对象创建、未定义值
              * / %                              乘法、除法、取模
              + - +                              加法、剪发、字符串连接
              << >> >>>                          移位
              < <= > >= instanceof               小于、小于等于、大于、大于等于、instanceof
              == != === !==                      等于、不等于、严格相等、非严格相等
              &                                  按位与
              ^                                  按位异或
              |                                  按位或
              &&                                 逻辑与
              ||                                 逻辑或
              ?:                                 条件(三目运算)
              = += -= *= /= %=                   赋值、运算赋值
              ,                                  多重求职

2.流程控制
    JS是一门既面向过程,也是面向对象的解释语言.
    面向过程:按照代码书写的顺序依次执行.(OOP)
    JS也是一门结构性语言.
    JS的结构分为顺序结构、分支(条件/选择)结构和循环结构三种.
    顺序结构:按照代码的书写顺序依次执行,一般包含初始化、赋值、输入/输出等语句;
    分支(条件/选择)结构:用if或swirch语句实现,其中的代码的执行是有条件选择执行的;
    循环结构:某部分代码在指定的条件范围内反腐之星.用for/for...in/forEach/white/do,,,while语句实现.

    1)条件结构
        a.单分支
            语法:
                if(条件)语句;
                或
                if(条件){
                    语句组;
                }
                如果条件成立,将执行语句或语句组;条件不成立,执行if的下一条语句.

        b.双分株
            语法:
                if(条件)语句1;else 语句2;
                或if(条件){
                    语句组1;
                }else{              //else表示"否则"的意思,其后不能写条件
                    语句组2;
                }

                如果条件成立,将执行语句1或语句组1;条件不成立,将执行语句2或语句组2.

        c.多分支(三分支及以上的)
            多分支实际上是单分支和双分支的嵌套.
            语法:
                if(条件1){
                    if(条件2){
                        if(条件3){
                            语句或语句组;
                        }
                    }
                }
                或
                if(条件1){
                    语句或语句组1;
                }else{
                    if(条件2){
                        语句或语句组2;
                    }else{
                        语句或语句组3
                    }
                }
                或
                if(条件1){
                    if(条件2){
                        语句1或语句组1;
                    }else{
                        语句1或居于组3;
                    }
                }
                或(简洁写法,推荐)
                if(条件1){
                    语句1或语句组1;
                }else if(条件2){
                    语句2或语句组2;
                }else if(条件3){
                    语句3或语句组3;
                }
                ...
                else{
                    语句n或语句组n;
                }
                如果条件1成立,将执行语句1或语句组1,后面的代码将不会被执行;
                如果条件1不成立,将判断条件2,条件2成立,将执行与剧组2或语句2,以此类推;
                如果前面的条件都不满足时,将执行else后面的代码.

        d.情况语句switch
            语法:
                switch(表达式){
                    case 表达式1: 语句1或语句组1;[break;]
                    case 表达式1: 语句2或语句组2;[break;]
                    case 表达式1: 语句3或语句组3;[break;]
                    ...
                    case 表达式1: 语句4或语句组4;[break;]
                    default:语句n+1或语句组N+1;
                }

            说明:执行表达式,如果表达式的结果为case后面的某个对应的值,将执行后面锁对应的语句或语句组.
            如果语句后有break,将终止该情况语句,如果没有break,将不再判断条件,继续执行后面的语句,
            直到遇到break为止;如果条件都不满足,将自动执行default后的语句.

        switch与if的区别:
            switch一般用于能获取结果的简单条件的判断,而if一般用于较为复杂的条件判断;
            if能是咸的条件判断,switch不一定能实现、switch能实现的条件判断,if一定能实现.
            如果switch和if都能用的情况下,switch一般较简洁.

    2)循环结构(for)
        I)循环
            a.计数循环(for)
                语法:
                    for([变量初始值];[条件];[步长]){
                        [循环体;]
                        [continue;]
                        [break;]
                    }

                说明:
                    先执行变量初始值,再判断条件,如果条件成立,再执行循环体,再计算步长,
                    最后再判断条件,条件成立,继续执行循环体...直到条件不成立,跳出循环提为止.

                    该循环的次数是可以计算出来的:
                        循环次数=[(终值-初值) / 步长] + 1

            b.当型循环(while)
                语法:
                    while(条件){
                        [循环体;]
                        [continue;]
                        [break;]
                    }

                说明:当条件成立时,执行循环体,反之则跳出循环.

            c.直到型循环(do...while)
                语法:
                    do[
                        [循环体;]
                        [continue;]
                        [break;]
                    ] while(条件)

                说明:
                    先执行循环体,再判断条件,如果条件成立,继续循环,反之则跳出循环.

                    直到型循环与当型循环的区别:
                        当条件1次都不成立时,直到型循环至少会执行一次循环,而当型循环1次也不执行.

            d.数组和对象遍历(后面讲)
                for...in
                forEach()

                小结:
                    for只能用于循环次数已知的情况;而while和do...while可以用在循环次数已知或未知的情况.
                一般循环次数已知用for较多;for...in用于遍历数组和对象;forEach()用于遍历数组.
                for循环也可以用遍历数组,但性能较差.

        II)break和continue语句
            break语句可以用在switch语句和循环语句中(forEach循环除外),表示跳出(结束)情况语句或循环.
            continue语句只能用在循环语句中(forEach循环除外),表示结束本次循环,继续下一次循环

            注意:
                a)break和continue语句不需单独存在,后面不能添加其他代码
                b)break和continue语句一般放在if语句中.




