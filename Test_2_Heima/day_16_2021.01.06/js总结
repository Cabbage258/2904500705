1.JS是运行在客户端的一种解释型编程语言,它是一种弱类型的语言.
2.JS的作用:
    用来完成前后端交互、增加用户体验的一些逻辑实现.
3.一个网页是由三部分组成的:结构(HTML/HTML5)、表现(CSS/CSS3)和行为(JavaScript)
4.前端开发的核心是:JavaScript
5.JavaScript的组成:
    1)ECMAScript(标准:ECMA-262) : 基础语言部分(基础、面向对象等)
    2)DOM (标准:W3C): 节点操作
    3)BOM (无标准) : 浏览器操作
6.JS的特点
    1)松散性
        JS中的变量没有一个明确的类型,也叫弱类型的语言(允许将一块内存看作多种类型).
    2)对象属性
        对象的属性也可以映射为任意类型的数值
    3)继承机制
        JS是基于原型继承的.
7.使用JavaScript
    1)使用script标签(只能被当前HTML文件使用)
        <script type="javascript" defer="defer" charset="UTF-8">
                    alert('这是我的第一个JS程序');//alert表示弹出一个警告框
        </script>

        defer : 表示所有DOM元素加载完成后,再执行JS代码(现在开发一般不需要)
        charset : 表示字符编码(主要解决汉字乱码问题) (现在开发一般不需要)
        注意:
            a.script标签可以写在网页代码中的任意地方,因为JS是同步执行的,但为了避免JS阻塞和影响操作DOM,最好写在body后
            b.如果要输出script结束标签时,必须要拆开写
                alert('</sc' + 'ript>');
    2)在a标签的href中写JS代码(实际开发中不建议这样使用,因为会影响性能)
        <a href="javascript:alert('123')">123</a>
        <a href="javascript:var a=10,b=20;alert('结果为:'+(a+b))">计算结果</a>
        <a href="javascript:close();">&times;</a>
        <a href="javascript:void(1);">test</a>
    3)用script标签引入外部JS文件(可被多个HTML文件使用)


        说明:
            src:引入的外部JS文件的路径和文件名(只能用于引入JS文件)
            async:异步加载JS代码(在加载DOM元素的同时可以加载运行JS代码)

8.标识符
    所谓的标识符,就是指变量、函数、属性的名字,或者函数的参数
        标识符定义规则:
            1)第一个字符必须是一个字母、下划线(_)或一个美元符号($)
            2)其他字符可以使字母、下划线、美元符号或数字
            3)不能把关键字、保留字、true、false和null作为标识符
            关键字及保留字在打出时会有语法提示

            注意:
                在JS中任意地方都是严格区别字母大小写的!!

9.注释
    1)单行注释 //
    2)多行注释 /*  */
    说明:
        1)注释语句在浏览器中不会背解析执行,仅起说明作用
        2)在项目中,要习惯去写注释,主要便于后期的项目维护

10.常量
    常量页脚直接量或字面量,在程序中直接给出具体的数据
    常量是不可以改变的,如:100,true,'abc',null,undefined等

11.变量
    变量就是在内存中开辟一段空间用于存放某个数据
    变量必须要有变量名,变量名必须遵循标识符的命名规范.

    定义:
        1)只定义变量
            var x;var a,b,c;
        2)定义变量且赋值
            var x = true;var y = 100

        说明:
            1)定义变量时不需要给出数据的类型(松散式语言的特点)
            2)变量可以重复定义,后面会覆盖前面的变量
            3)不用var顶定义变量也可以,默认是为window对象添加了属性.
                name = '张三';相当于  window.name = '张三'
            4)定义的变量如果没有赋值,系统将自动赋默认值为'undefined'
            5)一条语句可以以分号结束,也可以不加分号;如果是多条语句写在同一行上,必须用分号隔开.
            6)在书写代码时,除了字符串可以使用中文标点外,其他任何地方只能用英文标点.
12.数据类型
    数据类型指的是在内存存储的方式
    分为:
        1)基本数据类型
            number:数值型
                用来表示一个数字,通常可用作进行加减乘除等运算.
                分为整型和浮点型(就是小数)
                100(10进制)
                0123(8进制)
                0xar12(16进制)

                isNaN():用来判断是不是不是一个数(NaN是数值类型)

            string:字符型
                用引号(单双引号都可以,它们没区别)引起来的一串字符(可以使数字、字母、标点符号、汉字等),通常用作描述用
                'abc'
                "abc"
                "a\'bc"

            boolean:布尔(逻辑)型
                表示真(true)或假(false)

            null:空
                表示一个空对象的地址指定指向的为空

            undefined:未定义
                表示定义了一个变量,但如果没有给这个变量赋值,系统将自动赋值为undefined.
        2)引用数据类型
            object:对象型
                用来申明或存储一个对象(对象、函数、正则、字符、数值等)

                var a = new Number(10);
                var obj = {
                    sno:'007'
                    sname:'张三'
                }

13.运算符
    1)算术运算符
        + - * / %(求余/模) ++(自增) --(自减)
                ++a:前自增,先+1再运算
                a++:后自增先运算再+1

    2)字符串运算符
        +:用于实现字符串连接

    3)关系运算符
        > < >= <= == === != !==
        返回的结果只能是true或false
        比较方法
            a.数值比较,是比较其大小
            b.字符比较,是比较ASCII码值的大小
            c.汉字比较,是比较器Unicode编码值的大小
                可以通过charCodeAt()获取编码值
            d.==和!=只比较值,不比较类型;===和!==既比较值又比较类型

        比较:部分符号<数字<大写字母<小写字母<汉字

    4)逻辑运算符
        逻辑运算符有:!、&&和||三种.返回的值一般是逻辑值true或false,也可能返回其他值
        !:逻辑非(取反)(单目/一元运算)
            !true->false  !false->true
        &&:逻辑与(双目/二元运算)
            只要有一个操作数为false,结果为false
            注意:
                如果两个中任意一个操作数非逻辑值,第一个操作数的结果为true时,返回第二个操作数的值;第一个操作数为false时,返回第一个操作数的值.
        ||:逻辑或(双目/二元运算)
            只要有一个操作数为true,结果为true
            注意:
                如果两个中任意一个操作数非逻辑值,第一个操作数的结果为true时,返回第一个操作数的值;第一个操作数的结构为false时,返回第二个操作数的值.

        短路运算:
            a.&&运算时,如果第一个操作数为false,不需要计算第二个操作数,结果返回false
            b.||运算时,如果第一个操作数为true,不需要计算第二个操作数,结果返回true

    5)位运算符
        暂不讲

    6)三目运算符(条件运算符)
        语法:
            表达式1 ? 表达式2 : 表达式3
            如果表达式1成立,返回表达式2的结果;如果不成立,返回表达式3的结果

        Tips:
            三目运算相当于if语句中的双分支结构.
            如果表达式2或表达式3较为复杂,建议使用if语句或switch语句实现

        运算符优先级:
             运算符	                                描述
             . [] ()	                            字段访问、数组下标、函数调用以及表达式分组
             ++ -- - ~ ! delete new typeof void	一元运算符、返回数据类型、对象创建、未定义值
             * / %	                            乘法、除法、取模
             + - + 	                            加法、减法、字符串连接
             << >> >>>	                        移位
             < <= > >= instanceof	            小于、小于等于、大于、大于等于、instanceof
             == != === !==	                    等于、不等于、严格相等、非严格相等
             &	                                按位与
             ^	                                按位异或
             |	                                按位或
             &&	                                逻辑与
             ||	                                逻辑或
             ?:	                                条件（三目运算）
             = += -= *= /= %=	                赋值、运算赋值
             ,	                                多重求值

14.流程控制
    JS是一门既面向过程,也是面向对象的解释语言.
    面向过程:按照代码书写的顺序依次执行.(OOP)
    JS也是一门结构性语言.
    JS的结构分为顺序结构、分支(条件/选择)结构和循环结构三种
    顺序结构:按照代码的书写顺序依次执行,一般包含初始化、赋值、输入/输出等语句
    分支(条件/选择)结构:用if或switch语句实现,其中的代码的执行是有条件选择执行的.
    循环结构:某部分代码在指定的条件范围内反复执行.用for/for...in/forEach/while/to...while语句实现.

    1)条件结构
        a.单分支
            语法:
                if(条件)语句;
                或
                if(条件){
                    语句组;
                }
            如果条件成立,将执行语句或语句组;条件不成立,执行if的下一条语句.

        b.双分支
            语法:
                if(条件)语句1;else 语句2;
                或
                if(条件){
                    语句组1;
                }else{
                    语句组2;
                }
            如果条件成立,将执行语句1或语句组1;条件不成立,将执行语句2或语句组2.

            注意:else表示"否则"的意思,其后不能写条件

        c.多分支(三分支及以上的)
            多分支实际上是单分支和双分支的嵌套.
            语法:

            如果条件1成立,将执行语句1或语句组1,后面的代码将不会被执行;
            如果条件1不成立,将判断条件2,条件2成立,将执行语句组2或语句2,以此类推
            如果前面的条件都不满足时,将执行elseHoumiandedaima .

        d.情况语句switch
            语法:
                switch(表达式){
                    case 表达式1: 语句1或语句组1;[break;]
                    case 表达式2: 语句2或语句组2;[break;]
                    case 表达式3: 语句3或语句组3;[break;]
                    ...
                    case 表达式4: 语句4或语句组4;[break;]
                    default:语句n+1或语句组N+1;
                }

            说明:执行表达式,如果表达式的结果为case后面的某个对应的值,将执行后面锁对应的语句或语句组.
                如果语句后有break,将终止该情况语句,如果没有break,将不再判断条件,继续执行后面的语句,
                直到遇到break为止;如果条件都不满足,将自动执行default后面的语句.


            switch与if的区别:
                switch一般用于能获取结果的简单条件判断,而if一般用于较为复杂的条件判;
                if能实现的条件判断,switch不一定能实现、switch能实现的条件判断,if一定能实现.

    2)循环结构
        I)循环
            a.计数循环(for)
                语法:
                    for([变量初始值];[条件];[步长]){
                        [循环体;]
                        [continue;]
                        [break;]
                    }

                说明:
                    先执行变量初始值,再判断条件,如果条件成立,再执行循环体,再计算步长,
                    最后再判断条件,条件成立,继续执行循环体...直到条件不成立,跳出循环体为止.

                    该循环的次数是可以计算出来的:
                        循环次数=[(终值-初值) / 步长] + 1

            b.当型循环(while)
                语法:
                    while(条件){
                        [循环体;]
                        [continue;]
                        [break;]
                    }

                说明:当条件成立时,执行循环体,反之则跳出循环.

            c.直到型循环(do...while)
                语法:
                    do[
                        [循环体;]
                        [continue;]
                        [break;]
                    ] while(条件)

                说明:
                    先执行循环体,再判断条件,如果条件成立,继续循环,反之则跳出循环

                    直到型循环与当型循环的区别:
                        当条件1次都不成立时,直到型循环至少会执行一次循环,而当型循环1次也不执行.

            d.数组和对象遍历
                后面讲


            小结:
                while和do...while可以用在循环次数已知或未知的情况.
                一般循环次数已知用forJiaoduo ;for...in用于遍历数组和对象;forEach()用于遍历数组.
                for循环也可以遍历数组,但性能较差
        II)break和continue语句
            break语句可以用在switch语句和循环语句中(forEach循环除外),表示跳出(结束)情况语句或循环.
            continue语句只能用在循环语句中(forEach循环除外),表示结束本次循环,继续下一次循环

        注意:
            a)break和continue语句必须单独存在,后面不能添加其他代码.
            b)break和continue语句一般放在if语句中.

15.函数
    函数就是将具有一定功能的一段JS代码的封装,可以在程序的多个地方被反复调用.
    1)定义函数
        格式一:
            function 函数名 ([形参列表]){
                函数体:
                [return[<表达式>];]
            }

        格式二:
            var 变量名 = function([形参列表]){
                函数体;
                [return[<表达式>];]
            }

        格式三:
            ;(function([形参列表])){
                函数体;
                [return[<表达式>];]
            }([实参列表]);
                上面的函数叫立即执行函数(IIFE),它自动调用自身,不能在其他地方被调用,一般用于js库或js插件的封装或闭包处理.

    2)函数调用
        函数名([实参列表]);

        Tips:
            函数不会自动执行(IIFE除外),必须通过调动才能执行.

    3)return
        函数可以通过return返回结果,如果return没有返回结果,表示结束函数的调用,且返回调用处.

    4)arguments对象
        返回实参列表的一个伪数组.
        伪数组:
            具有数组的length属性;
            按索引方式存储数据;
            不具有数组的push等方法.
        一般用在不确定传过来的实参的个数的情况下.

16.对象(object)
    对象,其实就是一种类型.即引用类型,用于将数据和功能组织在一起.
    对象由属性和方法组成,通常用键值对定义.
    1)对象定义
        a)new构建
            new Object([参数]);
        b)字面量定义
            var obj = {
                key:value,          //属性
                fn:function(){      //方法
                    ...
                }
            }

    2)对象引用
        a)对象名,属性名
          对象名,方法名([实参列表])
        b)对象名[属性名]

17.数组(Array)
    数组将一组数据组合到一起,并存入到一个变量中.
    数组是有序排列的,占用一段连续的内存空间.
    一个数组可以存储不同类型的数据.
    1)dingyishuzu
        a.new
            new Array([值列表])
        b.字面量创建
            var arr = [值列表]
    2)获取数组元素值
        数组名[索引] //索引可以使一个数值型常量,也可以使一个表达式或函数或变量
    3)遍历数组
        一维数组用一个循环实现;二维数组必须用双重循环实现.(先行后列)
        a.for
        b.for...in      //推荐写法
        c.forEach()
    4)数组的属性和方法
        a.length属性
            获取数组的长度.
        b.方法
            i)push()
                向数组中添加数据到数组最后
            ii)pop()
                删除数组最后一个元素
            iii)unshift()
                向数组头部添加数据
            iv)shift()
                删除数组第一个元素
            v)concat()
                将两个或多个数组组合成一个数组
            vi)reverse()
                对数组进行倒序处理.
            vii)join()
                将数组转换为字符串
            viii)splice()
                删除、修改或向数组中添加数据.

18.Function类型
    Function是一个用来构建函数的类(构造函数).

    函数内部属性
        在函数内部,有两个特殊的对象:arguments和this.
            callee:
                arguments是一个类数组对象,包含着传入函数中的所有参数,主要用途是保存函数参数
                但这个对象还有一个明教callee的属性,该属性是一个指针,指向拥有这个arguments对象的函数
                也即是说可以通过arguments.callee调用函数自身,一般用于函数的递归调用.

                函数自己调用自己叫函数的递归调用.

            this指针对象
                在全局中this指向的是window(在JS中没有global这个全局对象,儿JS的全局对象是window);
                在函数中this指向的是这个函数执行所操作的当前对象.

19.内置对象
    1)global对象
        在JS中没有global对象,Web浏览器将global对象视为window对象的一部分加以实现.

        方法:
            a.encodeURIComponent():对unicode进行编码处理

            b.decodeURIComponent():对unicode编码进行解码处理

            c.eval():具有字符串解析器的作用(慎用!因为它的性能较差,且比较危险)

    2)Math对象
        Math数学对象不是一个构造函数,所以不需要new调用,直接偷来用里面的属性和方法即可.
        该对象主要提供了大量的数学运算的属性和方法.
        属性:
            Math.E
            Math.PI
        方法:
            min(),取最小值函数
            max(),取最大值函数
            round(),四舍五入函数
            ceil(),向上取整(取大于或等于操作数的最小整数)
            floor(),向下取整(取小于或等于操作数的最大整数)
            random(),产生[0,1)之间的一个小数
            abs(num),返回num的绝对值
            exp(num),返回Math.E的num次幂
            log(num),返回num的自然对数
            pow(num,power),返回num的power次幂
            sqrt(num),返回num的平方根
            acos(x),返回x的反余弦值
            asin(x),返回x的反正弦值
            atan(x),返回x的反正切值
            atan2(y,x),返回y/x的反正切值
            cos(x),返回x的余弦值
            sin(x),返回x的正弦值
            tan(x),返回x的正切值

20.面向对象
    创建对象:
        1)常规创建
            a.new
            b.字面量
        2)工厂模式
            通过封装函数实现创建一批相似的对象.
            缺陷:无法知道创建的对象是哪一个对象的实例.
        3)构造函数
            构造函数是用来构建一个类.(ES5中没有类的概念,实际上这里的构造函数就是类)
            类是对象的一个抽象符号化表示(把相同或相似的一部分对象抽离出来就形成了一个类).
            对象是类的实例化(具体化)(赋予一定的属性和功能)

            a.创建构造函数(类)
                语法:
                    function 类名 ([形参列表]){
                        this.属性名 = 参数
                        this.方法名 = function(){

                        }
                    }
            b.通过构造函数实例化对象
                new 类名([实参列表]);

            使用了构造函数的方法,和使用工厂模式的方法不同之处:
                · 构造函数方法没有显示的创建对象(new Object());
                · 直接将属性和方法赋值给this对象;
                · 没有return语句.
            构造函数的方法有一些规范
                · 函数名和实例化构造名相同且大写.(非强制,但这么写有助于区分构造函数和普通函数)
                · 通过构造函数创建对象,必须使用new运算符.
            构造函数执行的过程:
                · 当使用了构造函数,并且new构造函数(),那么就从后台执行了new Object()
                · 将构造函数的作用域给新对象(即new Object()创建出的对象),而函数体内的this就代表new Object()出来的对象
                · 执行构造函数内的代码
                · 返回新对象(后台直接返回).

21.基本包装类型(字符串对象)
    在基本数据类型中有3个特殊的类的存在:String,Number和Boolean.
    上面3个基本类型都有自己的包装对象,有相应的属性和方法.调用方法的过程是在后台发生的,所以我们称作为基本包装类型.

    通俗地讲就是基本类型的数据都有一个包装他们的类,这些类都有自己的属性和方法,这些基本类型的数据都可以直接去调用这些属性和方法.

    1)Boolean类型
        没有自己的属性和方法.
    2)Number类型
        a.属性:
            MAX_VALUE           表示最大值
            MIN_VALUE           表示最小值
            NaN                 非数值
            NEGATIVE_INFINITY   负无穷大,溢出返回该值
            POSITIVE_INFINITY   无穷大,溢出返回该值
            prototype           原型,用于增加新属性和方法

        b.方法
            toString()         将数值转化为字符串,并且可以转换进制
            toLocaleString()   根据本地时间把Date对象转换为字符串
            toFixed()          将数字保留小数点后指定位数并转化为字符串
            toExponential()    将数字以指数形式表示,保留小数点后指定位数并转化为字符串
            toPrecision()      指数形式或点形式表示数,保留小数点后面指定位数并转化为字符串
            value()            显示原始值

    3)String属性
        a.属性
            length
        b.方法
            charAt(n)                               返回指定索引位置的字符
            str[n]                                  获取指定位置处的字符(兼容性问题)
            charCodeAt(n)                           以Unicode编码形式返回指定索引位置的字符
            concat(str1...str2)                     将字符串参数串联到调用该方法的字符串
            slice(n,m)                              返回字符串n到m之间位置的字符串
            substring(n,m)                          同上
            substr(n,m)                             返回字符串n开始的m个字符串
            indexOf(str,n)                          从n开始搜索的第一个str,并将搜索的索引值返回
            lastIndexOf(str,n)                      从n开始搜索的最后一个str,并将搜索的索引值返回
            str.toLowerCase()                       将字符串全部转换为小写
            str.toUpperCase()                       将字符串全部转换为大写
            (了解)str.toLocaleLowerCase()            将字符串全部转换为小写,并且本地化
            (了解)str.toLocaleUpperCase()            将字符串全部转换为大写,并且本地化
                注意:只有几种语言(如土耳其语)具有地方特色的大小写本地性,一般来说,是否本地化效果都是一致的.
            match(pattern)                          返回pattern 中的子串或null
            replace(pattern,replacement)            用replacement替换pattern
            search(pattern)                         返回字符串中pattern开始位置
            split(pattern)                          返回字符串按指定pattern拆分的数组
            String.fromCharCode(ascii)             输出Ascii码对应值
            localeCompare(str1,str2)                比较两个字符串,并返回相应的值

22.变量、作用域及内存
    1)变量
        a.基本类型的变量
            基本类型的变量的值存储在栈中
        b.引用类型的变量
            引用类型的变量的值存储在堆中,在栈中存储的是引用类型的变量的地址.(指针)
            如果要获取引用类型变量的值,需要选从栈中获取地址,再按址查找,从而获取到值

    2)作用域
        在ES5作用域分为全局作用域和局部作用域两种.
        在ES6作用域分为全局作用域、局部作用域和块级作用域三种.
            全局作用域:
                定义在函数外部的变量拥有全局作用域
            局部作用域:
                定义在函数内部的变量拥有局部作用域

    3)垃圾回收机制
        JS有自动回收垃圾的功能.
        在项目开发过程中,初始化对象时,最好赋初值为null.