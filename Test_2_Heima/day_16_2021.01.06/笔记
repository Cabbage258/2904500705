变量、作用域及内存

    1.变量
        a.基本类型的变量
            基本类型的变量的值存储在栈中
        b.引用类型的变量
            引用类型的变量的值存储在堆中,在栈中存储的是引用类型的变量的地址.(指针).
            如果要获取引用类型变量的值,需要先从栈中获取地址,在按址查找,从而获取到值.

    2.作用域
        预解析(变量、函数提升)
            在当前作用域下,JS代码执行之前,浏览器会默认把带有var和function声明的变量在内存中进行提前声明或定义.(提升到当前作用域的最前面)
            从上到下执行JS语句
            预解析会把变量和函数的声明在代码执行之前执行完成.

        在es5作用域分为全局作用域和局部作用域两种.
        在ES6作用域分为全局作用域、局部作用域和块级作用域三种.
            全局作用域:
                定义在函数外部的变量拥有全局作用域
            局局部作用域:
                定义在函数内部的变量拥有局部作用域

对象
    在JS中,对象是一组无序的相关属性和方法的集合,所有的事物都是对象,例如字符串、
    数值、数组、函数等.
    对象是由属性和方法组成的,
    事物的特征,在对象中用属性来表示;事物的行为,在对象中用方法来表示.
    对象,其实就是一种类型,即引用类型.用于将数据和功能组织在一起.
    对象由属性和方法组成,通常用键值对定义.
    1)对象定义
        a)new构建
            new Object([参数]);
        b)字面量定义
            var obj = {
                key:value,          //属性
                fn:function(){      //方法
                    ...
                }
            }

        c)构造函数
            构造函数是用来构建一个类.(ES5中没有类的概念,实际上这里的构造函数就是类)
            类是对象的一个抽象符号化表示(把相同或相似的一部分对象抽离出来就形成了一个类)
            对象是类的实例化(具体化)(赋予一定的属性和功能)

            a.创建构造函数(类)
                语法:
                    Function 类名 ([形参列表]){
                        this.属性名 = 参数;
                        this.方法名 = function(){
                            函数体;
                        }
                    }

            b.通过构造函数实例化对象
                new 类名([实参列表]);

            使用了构造函数方法和使用工厂模式的方法不同之处如下:
                · 构造函数方法没有显示的创建对象(new Object())
                · 直接将属性和方法赋值给this对象
                ·没有return语句

            构造含税的方法有一些规范:
                · 函数名和实例化构造名相同且大写.(非强制,但这么写有助于区分构造函数和普通函数)
                · 通过构造函数创建对象,必须使用new运算符.

            构造函数执行的过程:
                · 当使用了构造函数,并且new构造函数(),那么就后台执行了new Object();
                · 将构造函数的作用于给新对象(即new Object()创建出的对象),而函数体内的this就代表new Object()出来的对象
                · 执行构造函数内的代码
                · 返回新对象(后台直接返回,所以不需要return)

    2)对象引用
        a)对象名,属性名
          对象名,方法名([实参列表])
        b)对象名[属性名]

