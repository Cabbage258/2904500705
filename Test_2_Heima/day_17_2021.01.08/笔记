内置对象
    JS中的对象分为三种:自定义对象、内置对象、浏览器对象
    1)Math对象
        Math数学对象不是一个构造函数,所以不需要new调用,直接偷来用里面的属性和方法即可.
        该对象主要提供了大量的数学运算的属性和方法.
        属性:
            Math.PI:圆周率
            Math.E
        方法:
            min(),取最小值函数
            max(),取最大值函数
            round(),四舍五入函数
            ceil(),向上取整(取大于或等于操作数的最小整数)误差小数点15位后
            floor(),向下取整(取小于或等于操作数的最大整数)
            abs(num),返回num的绝对值,又一个隐式转换
            random(),产生[0,1)之间的一个小数
                Math.floor(Math.random() * (max - min + 1)) + min
                //两个数之间的随机整数并且包含这两个整数.(封装好调用时传参min,max)

    2.日期对象
        Date()日期对象是一个构造函数,用new调用创建
            1)不写参数  获取到当前本地时间
            2)写参数
                i)数字         月份返回的是索引,0-11
                ii)字符串      '1990-01-01'  '1990/01/01'

            属性:

            方法:
                getFullYear()   获取年
                getMonth()      获取月
                getDate()       获取日
                getDay()        获取星期几,返回值0-6,周日索引0
                getHours()      获取时
                getMinutes()    获取分
                getSeconds()    获取秒

    3.数组对象
        var 变量名 = new Array()//括号内无值时空数组;只有一个值时代表新数组长度,但是空数组;两个及以上,全部为新数组里面的数组元素.
        instanceof  运算符   用来检测是否为数组
            属性:
                length      数组长度

            方法:
                isArray(参数)    是否为数组,ie9以下不支持
                push()          向数组中添加数据到数组最后(返回结果为新数组的length)
                pop()           删除数组最后一个元素(返回结果是删除的那个元素)
                unshift()       向数组头部添加数据(返回结果为新数组的length)
                shift()         删除数组第一个元素(返回的是删除的那个元素)
                concat()        将两个或多个数组组合成一个数组
                reverse()       对数组进行倒序处理
                join()          将数组转换为字符串
                splice()        删除、修改或向数组中添加数据
                sort()          给数组排序
                    arr.sort(function(a,b){
                        return a - b//从小到大
                        return b - a//从大到小
                    })
                indexOf(数组元素) 返回该数组元素的索引号(只返回第一个满足条件的索引号,没找到返回-1)(两个参数,第一个为起始位置索引号,第二个是数组元素)
                lastIndexOf(数组元素) 同上,但从后向前检索

    4.字符串对象(基本包装类型)
        在基本数据类型中有3个特殊的类的存在:String,Number和Boolean.
        上面3个基本类型都有自己的包装对象,有相应的属性和方法,调用方法的过程是在后台发生的,所以我们称作为基本包装类型.

        通俗地讲就是基本类型的数据都有一个包装他们的类,这些类都有自己的属性和方法,这些基本类型的数据都可以直接去调用这些属性和方法.
        包装对象,其实就是对象,有相应的属性和方法.调用方法的过程,是在后台偷偷发生的.

            /*平时写程序的过程:
                var str = 'hello'' //string 基本类型
                var s2 = str.charAt(0); //在执行到这一句的时候,后台会自动完成以下动作
                (
                var str = new String('hello'); // 1)找到对应的包装对象类型,然后通过包装对象创建出一个和基本类型值相同的对象
                 var s2 = _str.charAt(0);      // 2)然后这个对象就可以调用包装对象下的方法,并且返回给s2
                   _str = null;                // 3)之后这个临时创建的对象就被销毁了
                )
                alert(s2); //h
                alert(str); //hello
            */

            注意这是一瞬间的动作,实际上我们没有改变字符串本身的值.就是做了下面的动作.
            这也是为什么每个字符串具有的方法并没有改变字符串本身的原因.
            由此我们可以知道,引用类型和基本包装对象的区别在于:生存期
            引用类型所创建的对象,在执行的期间一直在内存中,而基本包装对象只是存在了一瞬间.
            每次赋值仅为改变栈所指向的内存地址,之前的对象则一直存在于内存中


        1)Boolean类型
            没有自己的属性和方法.
        2)Number类型
            属性:
                MAX_VALUE               表示最大值
                MIN_VALUE               表示最小值
                NaN                     非数值
                NEGATIVE_INFINITY       负无穷大,溢出返回该值
                POSITIVE_INFINITY       无穷大,溢出返回该值
                prototype               原型,用于增加新属性和方法

            方法:
                toString()              将数值转化为字符串,并且可以转换进制
                toLocaleString()        根据本地时间把Date对象转换为字符串
                toFixed                 将数字保留小数点后指定位数并转化为字符串
                toExponential()         讲数字以指数形式表示,保留小数点后指定位数并转化为字符串
                toPrecision()           指数形式或点形式表示数,保留小数点后面指定位数并转化为字符串
                value()                 显示原始值

        3)String属性
            属性
                length
            方法
                charAt(n)                       返回指定索引位置的字符
                tsr[n]                          获取指定位置处的字符(兼容性问题)
                charCodeAt(n)                   以Unicode编码形式返回指定索引位置的字符
                concat(str1...str2)             将字符串参数串联到调用该方法的字符串

                slice(n,m)                      返回字符串n到m之间位置的字符串
                substring(n,m)                  返回字符串n到m之间位置的字符串(两个参数要求是非负整数,且是以较小的一个参数为起始位置,较大的结束位置)
                    slice()和substring()的区别:
                        slice()不会以较小的参数作为初始位置,而是默认第一个参数作为初始位置;
                        slice()两个参数可以为负数,都是表示从末尾开始算起的位置;
                        slice()可以截取数组
                substr(n,m)                     返回字符串n开始的m个字符串(第一个参数可以使负数,声明从字符串的尾部开始算起的位置)

                indexOf(str,n)                  从n开始搜索的第一个str,并将搜索的索引值返回
                LastIndexOf(str,n)              从n开始搜索的最后一个str,并将搜索的索引值返回

                str.toLowerCase()               将字符串全部转换为小写
                str.toUpperCase()               将字符串全部转换为大写
                (了解)str.toLocaleLowerCase()    将字符串全部转换为小写,并且本地化
                (了解)str.toLocaleUpperCase()    将字符串全部转换为大写,并且本地化
                    注意:只有几种语言(如土耳其语)具有地方特色的大小写本地性,一般来说,是否本地化效果都是一致的
                match(pattern)                  返回pattern中的子串或null

                replace(pattern,replacement)    用replacement替换pattern(只会替换第一个,可以用正则g替换全部)

                search(pattern)                 返回字符串中pattern开始位置

                split(pattern)                  返回字符串按指定pattern拆分的数组

                String.fromCharCode(ascii)      输出ASCII码对应值
                localeCompare(str1,str2)        比较两个字符串,并返回相应的值

    5.简单数据类型复杂数据类型
        简单数据类型 值存入栈
        复杂数据类型 地址存入栈 , 值存入堆(引用类型变量传给形参是把地址赋给了变量)
